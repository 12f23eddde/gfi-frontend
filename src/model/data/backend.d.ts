/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/repos/num": {
    /** Get number of repositories */
    get: operations["get_repo_num_api_repos_num_get"];
  };
  "/api/repos/info": {
    /** Get brief info of repository */
    get: operations["get_repo_brief_api_repos_info_get"];
  };
  "/api/repos/info/detail": {
    /** Get detail info of repository */
    get: operations["get_repo_detail_api_repos_info_detail_get"];
  };
  "/api/repos/info/": {
    /** Get detailed info of repository (paged) */
    get: operations["get_paged_repo_detail_api_repos_info__get"];
  };
  "/api/repos/info/search": {
    /**
     * Search repository by owner, name, url or description
     * url: GitHub repo url http(s)://github.com/<owner>/<repo>
     * repo: query string (owner,name,descrption)
     */
    get: operations["search_repo_detail_api_repos_info_search_get"];
  };
  "/api/repos/language": {
    /** Get all languages */
    get: operations["get_repo_language_api_repos_language_get"];
  };
  "/api/repos/add": {
    /** Add repository to GFI-Bot */
    post: operations["add_repo_api_repos_add_post"];
  };
  "/api/repos/update/config": {
    /** Get repo config */
    get: operations["get_repo_update_config_api_repos_update_config_get"];
  };
  "/api/repos/update/": {
    /** Force update a repository (next update will be scheduled 24h later) */
    put: operations["force_repo_update_api_repos_update__put"];
  };
  "/api/repos/badge": {
    /** Get README badge for a repository */
    get: operations["get_badge_api_repos_badge_get"];
  };
  "/api/repos/badge/{owner}/{name}": {
    get: operations["get_badge_by_path_api_repos_badge__owner___name__get"];
  };
  "/api/issue/num": {
    /** Get number of open issues */
    get: operations["get_issue_num_api_issue_num_get"];
  };
  "/api/issue/gfi": {
    /** Get brief info of issue */
    get: operations["get_gfi_brief_api_issue_gfi_get"];
  };
  "/api/issue/gfi/num": {
    /** Get number of issues */
    get: operations["get_gfi_num_api_issue_gfi_num_get"];
  };
  "/api/github/actions/webhook": {
    /** Process Github App webhook */
    post: operations["github_app_webhook_process_api_github_actions_webhook_post"];
  };
  "/api/github/login": {
    /** Get oauth url of the github app */
    get: operations["get_oauth_app_login_url_api_github_login_get"];
  };
  "/api/github/app/installation": {
    /** Redirect from github webapp */
    get: operations["redirect_from_github_api_github_app_installation_get"];
  };
  "/api/user/github/login": {
    /** Redirect to GitHub OAuth login page */
    get: operations["github_login_api_user_github_login_get"];
  };
  "/api/user/github/callback": {
    /** Redirect from GitHub OAuth callback page */
    get: operations["github_callback_api_user_github_callback_get"];
  };
  "/api/user/queries": {
    get: operations["get_user_queries_api_user_queries_get"];
    delete: operations["delete_user_queries_api_user_queries_delete"];
  };
  "/api/user/queries/config": {
    get: operations["get_user_queries_config_api_user_queries_config_get"];
    put: operations["update_user_queries_config_api_user_queries_config_put"];
  };
  "/api/user/searches": {
    get: operations["get_user_searches_api_user_searches_get"];
    delete: operations["delete_user_searches_api_user_searches_delete"];
  };
  "/api/model/training/result": {
    /** get training result */
    get: operations["get_training_result_api_model_training_result_get"];
  };
}

export interface components {
  schemas: {
    /** Config */
    Config: {
      update_config: components["schemas"]["UpdateConfig"];
      repo_config: components["schemas"]["RepoConfig"];
    };
    /** GFIBrief */
    GFIBrief: {
      /** Name */
      name: string;
      /** Owner */
      owner: string;
      /** Number */
      number: number;
      /** Threshold */
      threshold: number;
      /** Probability */
      probability: number;
      /**
       * Last Updated
       * Format: date-time
       */
      last_updated: string;
    };
    /** GFIResponse[Config] */
    GFIResponse_Config_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      result: components["schemas"]["Config"];
    };
    /** GFIResponse[HttpUrl] */
    GFIResponse_HttpUrl_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /**
       * Result
       * Format: uri
       */
      result: string;
    };
    /** GFIResponse[List[gfibot.backend.models.GFIBrief]] */
    "GFIResponse_List_gfibot.backend.models.GFIBrief__": {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: components["schemas"]["GFIBrief"][];
    };
    /** GFIResponse[List[gfibot.backend.models.RepoDetail]] */
    "GFIResponse_List_gfibot.backend.models.RepoDetail__": {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: components["schemas"]["RepoDetail"][];
    };
    /** GFIResponse[List[gfibot.backend.models.TrainingResult]] */
    "GFIResponse_List_gfibot.backend.models.TrainingResult__": {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: components["schemas"]["TrainingResult"][];
    };
    /** GFIResponse[List[gfibot.backend.models.UserSearchedRepo]] */
    "GFIResponse_List_gfibot.backend.models.UserSearchedRepo__": {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: components["schemas"]["UserSearchedRepo"][];
    };
    /** GFIResponse[List[str]] */
    GFIResponse_List_str__: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: string[];
    };
    /** GFIResponse[RepoBrief] */
    GFIResponse_RepoBrief_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      result: components["schemas"]["RepoBrief"];
    };
    /** GFIResponse[RepoConfig] */
    GFIResponse_RepoConfig_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      result: components["schemas"]["RepoConfig"];
    };
    /** GFIResponse[RepoDetail] */
    GFIResponse_RepoDetail_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      result: components["schemas"]["RepoDetail"];
    };
    /** GFIResponse[UserQueryModel] */
    GFIResponse_UserQueryModel_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      result: components["schemas"]["UserQueryModel"];
    };
    /** GFIResponse[int] */
    GFIResponse_int_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: number;
    };
    /** GFIResponse[str] */
    GFIResponse_str_: {
      /**
       * Code
       * @default 200
       */
      code?: number;
      /** Result */
      result: string;
    };
    /** GitHubAppWebhookResponse */
    GitHubAppWebhookResponse: {
      /** Sender */
      sender: { [key: string]: unknown };
      /** Action */
      action: string;
      /** Issue */
      issue?: { [key: string]: unknown };
      repository?: components["schemas"]["GitHubRepo"];
      /** Repositories */
      repositories?: components["schemas"]["GitHubRepo"][];
      /** Repositories Added */
      repositories_added?: components["schemas"]["GitHubRepo"][];
      /** Repositories Removed */
      repositories_removed?: components["schemas"]["GitHubRepo"][];
    };
    /** GitHubRepo */
    GitHubRepo: {
      /** Full Name */
      full_name: string;
      /** Name */
      name: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MonthlyCount */
    MonthlyCount: {
      /**
       * Month
       * Format: date-time
       */
      month: string;
      /** Count */
      count: number;
    };
    /** RepoAddModel */
    RepoAddModel: {
      /** User */
      user: string;
      /** Repo */
      repo: string;
      /** Owner */
      owner: string;
    };
    /** RepoBrief */
    RepoBrief: {
      /** Name */
      name: string;
      /** Owner */
      owner: string;
      /** Description */
      description: string;
      /** Language */
      language: string;
      /** Topics */
      topics: string[];
    };
    /** RepoConfig */
    RepoConfig: {
      /** Newcomer Threshold */
      newcomer_threshold: number;
      /** Gfi Threshold */
      gfi_threshold: number;
      /** Need Comment */
      need_comment: boolean;
      /** Issue Tag */
      issue_tag: string;
    };
    /** RepoDetail */
    RepoDetail: {
      /** Name */
      name: string;
      /** Owner */
      owner: string;
      /** Description */
      description?: string;
      /** Language */
      language?: string;
      /** Topics */
      topics: string[];
      /** Monthly Stars */
      monthly_stars: components["schemas"]["MonthlyCount"][];
      /** Monthly Commits */
      monthly_commits: components["schemas"]["MonthlyCount"][];
      /** Monthly Issues */
      monthly_issues: components["schemas"]["MonthlyCount"][];
      /** Monthly Pulls */
      monthly_pulls: components["schemas"]["MonthlyCount"][];
    };
    /**
     * RepoSort
     * @description An enumeration.
     * @enum {undefined}
     */
    RepoSort:
      | "popularity"
      | "gfis"
      | "median_issue_resolve_time"
      | "newcomer_friendly";
    /** TrainingResult */
    TrainingResult: {
      /** Owner */
      owner: string;
      /** Name */
      name: string;
      /** Issues Train */
      issues_train: number;
      /** Issues Test */
      issues_test: number;
      /** N Resolved Issues */
      n_resolved_issues: number;
      /** N Newcomer Resolved */
      n_newcomer_resolved: number;
      /** Accuracy */
      accuracy?: number;
      /** Auc */
      auc?: number;
      /**
       * Last Updated
       * Format: date-time
       */
      last_updated: string;
    };
    /** UpdateConfig */
    UpdateConfig: {
      /** Task Id */
      task_id: string;
      /** Interval */
      interval: number;
      /**
       * Begin Time
       * Format: date-time
       */
      begin_time: string;
    };
    /** UpdateModel */
    UpdateModel: {
      /** Name */
      name: string;
      /** Owner */
      owner: string;
      /** Github Login */
      github_login: string;
    };
    /** UserQueryModel */
    UserQueryModel: {
      /** Nums */
      nums: number;
      /** Queries */
      queries: components["schemas"]["RepoBrief"][];
      /** Finished Queries */
      finished_queries: components["schemas"]["RepoBrief"][];
    };
    /** UserSearchedRepo */
    UserSearchedRepo: {
      /** Name */
      name: string;
      /** Owner */
      owner: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Increment */
      increment: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (Partial<string> & Partial<number>)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
}

export interface operations {
  /** Get number of repositories */
  get_repo_num_api_repos_num_get: {
    parameters: {
      query: {
        language?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_int_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get brief info of repository */
  get_repo_brief_api_repos_info_get: {
    parameters: {
      query: {
        name: string;
        owner: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_RepoBrief_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get detail info of repository */
  get_repo_detail_api_repos_info_detail_get: {
    parameters: {
      query: {
        name: string;
        owner: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_RepoDetail_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get detailed info of repository (paged) */
  get_paged_repo_detail_api_repos_info__get: {
    parameters: {
      query: {
        start: number;
        length: number;
        lang?: string;
        filter?: components["schemas"]["RepoSort"];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_gfibot.backend.models.RepoDetail__"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Search repository by owner, name, url or description
   * url: GitHub repo url http(s)://github.com/<owner>/<repo>
   * repo: query string (owner,name,descrption)
   */
  search_repo_detail_api_repos_info_search_get: {
    parameters: {
      query: {
        user?: string;
        repo?: string;
        url?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_gfibot.backend.models.RepoDetail__"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get all languages */
  get_repo_language_api_repos_language_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_str__"];
        };
      };
    };
  };
  /** Add repository to GFI-Bot */
  add_repo_api_repos_add_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_str_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoAddModel"];
      };
    };
  };
  /** Get repo config */
  get_repo_update_config_api_repos_update_config_get: {
    parameters: {
      query: {
        name: string;
        owner: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_Config_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Force update a repository (next update will be scheduled 24h later) */
  force_repo_update_api_repos_update__put: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_str_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateModel"];
      };
    };
  };
  /** Get README badge for a repository */
  get_badge_api_repos_badge_get: {
    parameters: {
      query: {
        name: string;
        owner: string;
      };
    };
    responses: {
      /** Successful Response */
      200: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_badge_by_path_api_repos_badge__owner___name__get: {
    parameters: {
      path: {
        name: string;
        owner: string;
      };
    };
    responses: {
      /** Successful Response */
      200: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get number of open issues */
  get_issue_num_api_issue_num_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_int_"];
        };
      };
    };
  };
  /** Get brief info of issue */
  get_gfi_brief_api_issue_gfi_get: {
    parameters: {
      query: {
        repo: string;
        owner: string;
        start?: number;
        length?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_gfibot.backend.models.GFIBrief__"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get number of issues */
  get_gfi_num_api_issue_gfi_num_get: {
    parameters: {
      query: {
        name?: string;
        owner?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_int_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Process Github App webhook */
  github_app_webhook_process_api_github_actions_webhook_post: {
    parameters: {
      header: {
        "x-github-event"?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_str_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GitHubAppWebhookResponse"];
      };
    };
  };
  /** Get oauth url of the github app */
  get_oauth_app_login_url_api_github_login_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_HttpUrl_"];
        };
      };
    };
  };
  /** Redirect from github webapp */
  redirect_from_github_api_github_app_installation_get: {
    parameters: {
      query: {
        code: string;
        redirect_from?: string;
      };
    };
    responses: {
      /** Successful Response */
      307: never;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Redirect to GitHub OAuth login page */
  github_login_api_user_github_login_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Redirect from GitHub OAuth callback page */
  github_callback_api_user_github_callback_get: {
    parameters: {
      query: {
        code: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_queries_api_user_queries_get: {
    parameters: {
      query: {
        user: string;
        filter?: components["schemas"]["RepoSort"];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_UserQueryModel_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_user_queries_api_user_queries_delete: {
    parameters: {
      query: {
        name: string;
        owner: string;
        user: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_str_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_queries_config_api_user_queries_config_get: {
    parameters: {
      query: {
        name: string;
        owner: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_RepoConfig_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_user_queries_config_api_user_queries_config_put: {
    parameters: {
      query: {
        name: string;
        owner: string;
        user: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_str_"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RepoConfig"];
      };
    };
  };
  get_user_searches_api_user_searches_get: {
    parameters: {
      query: {
        user: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_gfibot.backend.models.UserSearchedRepo__"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_user_searches_api_user_searches_delete: {
    parameters: {
      query: {
        user: string;
        id?: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_gfibot.backend.models.UserSearchedRepo__"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** get training result */
  get_training_result_api_model_training_result_get: {
    parameters: {
      query: {
        name?: string;
        owner?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GFIResponse_List_gfibot.backend.models.TrainingResult__"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}

export interface external {}
